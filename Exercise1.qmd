---
title: "Week 1 Exercise Part B"
author: "Peter Lund Andersen"
format:
  html:
    embed-resources: true
    self-contained-math: true
editor: visual
editor_options: 
  chunk_output_type: console
---

### Setup

Normally this would have the tag `#| result = FALSE` But for demonstration purposes have we left the options clean for this Quatro.

```{r}
#| label: setup
library(tidyverse) #used primarily for ggplot2
library(scales) #used for nicer log-scales with 'log_breaks()'
```

### Simulation

We here then run the simulation of 100 values from the log-normal distirbution, with parameters $\mu = 0.5$ and $\sigma = 0.5$ using the `rlnorm` (random log-normal) function from `stats` and save it in a tibble.

```{r}
#| label: sample_generation

set.seed(426) #set.seed for reproducibility
n <- 100
sim <- rlnorm(n, meanlog = 5, sdlog = 0.5)
tbl <- tibble(sim)
```

### Histogram of the simulated data

We now use ggplot to take the simulated data, and using the plotting `geom_histogram` we can make a histogram of the simulated data.

```{r}
#| label: histogram1
ggplot(mapping = aes(x = sim), data = tbl) +
  geom_histogram()
```

We here get the message that 'stat_bin()\` using \`bins = 30\`. Pick better value with \`binwidth'. We can also apply [Freedman--Diaconis rule](https://en.wikipedia.org/wiki/Freedmanâ€“Diaconis_rule), which let the number of bins be given as

$$
\text{binwidth} = 2 \cdot \frac{\text{IQR}(x)}{n^{1/3}},
$$

where $IQR(x)$ is the Interquartile range of the samples $x$ and $n$ is the number of samples. Then we get the following histogram.

```{r}
#| label: histogram3

freedman_diaconis <- function(x){
  return(2 * IQR(x) / length(x)^(1/3))
}

ggplot(mapping = aes(x = sim), data = tbl) +
  geom_histogram(binwidth = function(x) freedman_diaconis(x))
```

This still isnt all that pretty, but it is better. And this mostly seems to have somthing to do with the numbers of samples.

### Histogram of the log-transformed simulated data

```{r}
#| label: histogram4
ggplot(mapping = aes(x = sim), data = tbl) +
  geom_histogram(binwidth = function(x) freedman_diaconis(log(x))) +
  scale_x_log10(breaks = log_breaks())
```

We here add the scaling with `scale_x_log10` to transform our x-axis to a log-scale. It follows from the definition of log-normal distributions this should look like a normal distribution, but it looks like we need more samples for it to have show a precise bell-curve.

### Violin plot

```{r}
#| label: violin1

ggplot(mapping = aes(x = " ", y = sim)) +
  geom_violin() +
  xlab("Simulations")
```

Instead of plotting using `geom_histogram` we can instead use `geom_violin` to transform the data into a violin-plot. We here see that our samples seems to have some bumps for higher values, this indicates that we sampled some values from the heavy tail of the distribution. For our samples we have a mean of the sampled values is equal to `r mean(sim) %>% round(.,1)` and the standard deviation of the values `r sd(sim) %>% round(., 1)`. This should be compared to the theoretical values of `r exp(5 + 0.5^2 / 2) %>% round(., 1)` and a standard deviation of `r ((exp(0.5^2) - 1) * exp(2 * 5 + 0.5^2)) %>% sqrt() %>% round(., 1)`. [Formulas for mean and variance of log-normal](https://en.wikipedia.org/wiki/Log-normal_distribution).
